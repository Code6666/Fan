import com.android.build.gradle.api.BaseVariant

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'walle'
apply from: 'tinkerpatch.gradle'
android {
    compileSdkVersion build_versions.compile_sdk
    defaultConfig {
        applicationId "com.link.fan"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.versionCode
        versionName build_versions.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
        ndk{
            abiFilters 'armeabi','x86'
        }
    }

    signingConfigs {
        release {
            keyAlias 'fan'
            keyPassword 'link123456'
            storeFile file('/Users/link/Desktop/APP设计/菜谱/fankey.jks')
            storePassword 'link123456'
        }
    }

    buildTypes {
        release {
            release {
                //是否混淆
                minifyEnabled true
                //是否移除无用资源
                zipAlignEnabled true
                //混淆的配置文件
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }
        }
    }

    kapt {
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':librarycomponent')
    if (!login_isSingleCompile) {
        runtimeOnly project(':component_login')
    }
    if (!user_isSingleCompile) {
        runtimeOnly project(':component_user')
    }
    if (!main_isSingleCompile) {
        runtimeOnly project(':component_main')
    }
    if (!search_isSingleCompile) {
        runtimeOnly project(':component_search')
    }
    if (!menu_isSingleCompile) {
        runtimeOnly project(':component_menu')
    }
    if (!update_isSingleCompile) {
        runtimeOnly project(':component_update')
    }
    if (!shopping_isSingleCompile) {
        runtimeOnly project(':component_shopping')
    }

    kapt deps.alibaba.router_compiler
    kapt deps.room.compiler
    //热修复
    compileOnly(deps.tinker.anno) { changing = true }

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


walle {
    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
//    projectName - 项目名字
//    appName - App模块名字
//    packageName - applicationId (App包名packageName)
//    buildType - buildType (release/debug等)
//    channel - channel名称 (对应渠道打包中的渠道名字)
//    versionName - versionName (显示用的版本号)
//    versionCode - versionCode (内部版本号)
//    buildTime - buildTime (编译构建日期时间)
//    fileSHA1 - fileSHA1 (最终APK文件的SHA1哈希值)
//    flavorName - 编译构建 productFlavors 名
    apkFileNameFormat = '${appName}-${channel}-${buildType}-v${versionName}.apk'
    //configFile与channelFile两者必须存在一个，否则无法生成渠道包。两者都存在时优先执行configFile
    channelFile = new File("${project.getProjectDir()}/channel")
//    channelFile只支持渠道写入，如果想插入除渠道以外的其他信息，请在walle配置中使用configFile
    //configFile = new File("${project.getProjectDir()}/config.json")
}


// 根据不同的applicationId来配置不同的channelFile／configFile
afterEvaluate {
    project.android.applicationVariants.all { BaseVariant variant ->
        variant.assemble.doFirst {
            if (variant.applicationId.endsWith(".debug")) {
                project.walle.channelFile = new File("${project.getProjectDir()}/channel_debug")
            }
        }
    }
}

